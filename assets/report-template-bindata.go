// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// reportTemplate.html
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reporttemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x4c\xd5\x14\xf1\x22\x91\xfc\x68\x5a\x04\xb2\xe4\x43\x36\x09\x72\x48\x9b\x00\x71\x0f\x45\xd3\x03\x2d\x8e\x65\xae\x29\x52\x20\x47\x7e\x74\xe1\xff\x5e\x50\x0f\x5b\x96\xb5\xc9\x26\xd1\x81\x0b\x92\x33\xdf\x0c\xbf\x79\xad\xa3\x9f\x5e\x7f\xb8\x5d\xfc\xfd\xf1\x0d\xac\x29\x93\xf3\x41\xe4\xfe\x80\x64\x2a\x8d\x3d\x54\x9e\x3b\x40\xc6\xe7\x03\x00\x80\x28\x43\x62\x90\xac\x99\xb1\x48\xb1\xf7\xd7\xe2\xad\xff\xd2\xab\xaf\x48\x90\xc4\xf9\xc2\xad\xd1\xa8\xda\x54\x17\x96\x0e\x12\x81\x0e\x39\xc6\x1e\xe1\x9e\x46\x89\xb5\xb5\x92\xfb\x02\xa3\x35\xc1\xfd\x69\xef\xbe\x25\x4b\x36\xa9\xd1\x85\xe2\x7e\xa2\xa5\x36\x21\xfc\x3c\xfd\x75\x3a\x7e\x31\x99\x5d\x88\xd5\x77\xbb\xb5\x20\x3c\xdf\x1c\x07\x67\x6c\x5b\x24\x09\x5a\xfb\xea\x84\x77\xeb\x54\xbe\x6a\x8d\x33\xb3\x49\x0d\xa2\xea\x47\x5d\x31\x21\xbf\x07\xd2\x20\x7f\xc0\xcd\x8d\xc8\xbf\xd3\xc7\x43\x3f\x62\xce\x92\x0d\x4b\xf1\x96\x19\xfe\x9e\x1d\x74\xd1\x65\x38\x35\x82\xfb\x84\x59\x2e\x19\xa1\x83\x2c\x32\x65\x43\x98\xac\x0c\xb0\x82\xf4\x79\x99\x5d\xab\x55\xd2\x7e\xca\xf2\x10\x5e\xe6\xfb\x4b\x09\x2e\x6c\x2e\xd9\x21\x2c\x45\xfb\x7d\x23\xb4\xf4\x43\x8e\x3d\xca\xa2\xfb\x76\x82\xd3\x3a\x84\xc9\x78\xfc\x4b\xe7\x1d\xbd\xbe\x2f\xb5\xe1\x68\x7c\xc3\xb8\x28\x6c\x08\x2f\xba\xf7\x19\x33\xa9\x50\xfe\x52\x13\xe9\x2c\x84\xdf\xba\xf7\x39\xe3\x5c\xa8\xb4\xa3\xd9\x7e\x7a\xa2\xa5\x64\xb9\x15\x4b\x89\x9d\x77\x27\x85\xb1\x2e\xac\xb9\x16\x8a\xd0\x7c\x55\xfd\x1d\x32\x67\xab\x8b\xd2\x5b\x11\x17\xbe\x5d\xbd\xfa\x41\x92\x2a\x3a\x42\x50\x5a\x75\xc0\x5c\x19\xfb\x4c\x8a\x54\x85\x20\x71\x45\x97\xb7\xba\x20\x29\x14\xf6\x29\xae\xb4\x22\xdf\x8a\xff\x30\x84\xc9\x15\x7d\x3f\x42\xff\x97\x59\x0a\xd9\x8a\xb0\x5b\x52\x89\x56\x84\x8a\x42\x78\xfa\x79\x3c\x9e\xbe\x7a\xda\x0f\xc6\x12\x12\x5b\xfc\x32\x80\xf7\x79\x3a\x9d\x4c\xbd\xc7\x7a\x73\x5b\xe9\x75\xd0\x4e\x01\x1a\xc3\xe4\x2a\x46\x19\xdb\xfb\x6b\x14\xe9\x9a\x42\x18\x77\xd8\xde\xa2\x59\x49\xbd\x0b\x61\x2d\x38\x6f\xb7\xac\x32\x52\x86\x29\x2b\x48\x68\x15\xb6\x40\x60\x1c\x4c\x2d\x20\xb3\xe8\xeb\x82\x1e\xae\xd2\x4f\xc4\xc8\x7e\xd8\xa2\xd9\x0a\xdc\x3d\xbe\x50\x9b\x62\xfd\xe6\xce\x90\x33\x6b\x91\x2f\xd0\x92\xed\x58\x6b\x25\xce\xde\x97\xcc\xa4\xd8\x3b\x0a\xbe\xd2\xb4\x7f\x08\xbb\xd3\xbd\xdd\x1a\x8d\xca\xe1\x36\x1f\x44\xa3\x6a\x48\x46\x4b\xcd\x0f\x90\x48\x66\x6d\xec\xb9\xc1\xe6\xe6\x27\x17\x5b\x28\xe5\x62\xef\xc4\xc1\x4a\xe2\x7e\x56\xae\x3e\x17\x06\x93\x2a\x42\x15\x8b\xb3\x3a\xd3\x43\x98\xfc\x9e\xef\x67\xd0\x04\x7e\x32\x1e\x6f\xd7\xcd\xb8\x6d\x81\xb6\xfc\x2f\xbd\xf7\xe6\xee\x95\x90\xb8\xcc\x60\x29\x82\xc1\x5c\x1b\x8a\x46\x5c\x6c\x1f\xad\xcc\x19\x61\x08\xf7\xf7\x81\xdb\xbd\x66\x84\xc7\x63\x17\xa0\x7e\xe5\x55\x9e\xb4\x66\x7b\x94\x37\x66\xea\xda\x25\x9d\xbb\x04\xf6\x1a\xe5\x56\xc0\xbd\xf9\xc7\x72\x03\x0e\xd0\x96\xb6\x3f\x9e\x6f\x9d\xf9\xfc\x1b\x80\x5b\xd1\xf6\xe6\x6f\xcb\x4d\x0b\xf8\xed\xf9\xf6\x41\xe0\x9e\xac\x80\x8e\xb1\xf9\x42\x13\x93\x25\x2e\x90\xc8\x6a\xc2\xdc\x99\x83\x5e\x88\x0c\x5b\xe8\x2d\xfa\xee\xef\x0d\x53\x29\xc2\x13\xa1\x38\xee\x9f\xc3\x13\x94\x98\xb9\x8e\x10\xc6\x10\xbc\x5b\xfc\xf1\xfe\x4d\xb5\xb7\xc7\x63\x2d\xdf\x48\x9c\x0e\x50\xf1\xe3\x71\x50\x63\x46\x23\x97\x76\xf3\x41\x64\x13\x23\x72\xaa\x8c\x8c\x46\x70\x67\xa1\x3a\x01\xd2\x90\x18\x64\x84\xc0\x14\xd4\x1d\x89\x2d\x25\x96\x92\x5b\x66\xca\x33\x88\x81\xeb\xa4\x70\x76\x82\x14\xa9\x71\xe2\xd5\xe1\xd6\x71\xfa\x27\xcb\x70\xe8\xb5\xba\x99\x77\x53\x95\xc3\x4a\x1b\x18\x4a\x24\x10\x10\xc3\x78\x06\x02\xa2\x12\x2e\x90\xa8\x52\x5a\xcf\x40\x3c\x7b\x76\xd3\x2a\xb9\xc6\x5c\x67\x90\xc5\x50\x28\x8e\x2b\xa1\x90\x9f\xab\xf6\x84\x7d\x57\x61\xdf\xd5\xd8\xff\x88\x7f\x83\x64\x2d\x24\x37\xa8\x4e\x76\xee\x2e\xed\xb8\xcf\xa9\x36\xe4\xc6\xd7\x9a\x82\x30\x1b\xde\xdd\x5c\xa8\x88\x15\x0c\x6b\x95\x20\x69\x1e\x1e\x08\x95\xc8\x82\xa3\xbd\x60\xa0\x76\xdd\xbb\xe9\x9a\xad\xbb\xc6\xf5\x13\x6b\xe0\x2b\xe1\xa5\x41\xb6\xb9\x38\x3d\xf6\x35\xb1\x6b\xcc\x80\x71\xfe\x66\x8b\x8a\xde\x0b\x4b\xa8\xd0\x0c\xbd\x44\x8a\x64\xe3\x3d\x87\x55\xa1\xca\xb6\x02\xc3\xae\x7b\xb4\x16\xb6\x7a\x9b\xd3\x0a\x48\xa7\xa9\xc4\xa1\x57\x8d\x3a\xef\x92\x8e\x2a\x5a\xd5\xc0\x8a\x2b\x4d\x85\xfb\x26\x39\x3e\x89\xa5\x14\x2a\x9d\x5d\x31\x58\xab\x04\x65\x31\x05\x19\xdb\xbf\x2b\x9b\x58\x3f\x51\xbd\xa2\x10\x83\x2a\xa4\xbc\x84\x3e\x02\x4a\xdb\xfd\xd7\xe9\xcb\x20\x3b\xa1\xb8\xde\x05\x42\x29\x34\xf5\xe1\x33\xf0\xf2\xbd\x37\x7b\x88\xef\x3a\xaf\x5d\x79\x35\x05\x15\x8d\xca\x1f\x47\xff\x07\x00\x00\xff\xff\x6b\x28\x3b\x19\x2c\x0d\x00\x00")

func reporttemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_reporttemplateHtml,
		"reportTemplate.html",
	)
}

func reporttemplateHtml() (*asset, error) {
	bytes, err := reporttemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reportTemplate.html", size: 3372, mode: os.FileMode(438), modTime: time.Unix(1676305300, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"reportTemplate.html": reporttemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"reportTemplate.html": &bintree{reporttemplateHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
